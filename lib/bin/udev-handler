#!/usr/bin/python3

from __future__ import annotations

import os
import sys
import click
import pyudev as udev
import logging
import time
import re
import pwd
import anyio
import socket
import shlex
from asyncdbus import MessageBus, Message, Variant
from pprint import pprint
from pathlib import Path
from contextlib import suppress
from fnmatch import fnmatch

from yaml import safe_load as yload

from bdb import BdbQuit as DebugException

logger = logging.getLogger("handler")

class BusError(RuntimeError):
    pass

class NoSuchService(BusError):
    def __str__(self):
        return f"Service {self.args[0]} unknown"


class unwrap:
    """
    A sync+async context manager that unwraps single-element
    exception groups.
    """
    def __call__(self):
        "Singleton. Returns itself."
        return self

    def __enter__(self):
        return self

    async def __aenter__(self):
        return self

    def __exit__(self, c, e, t):
        if e is None:
            return
        while isinstance(e, BaseExceptionGroup):
            if len(e.exceptions) == 1:
                e = e.exceptions[0]
        raise e from None

    async def __aexit__(self, c, e, t):
        return self.__exit__(c, e, t)

unwrap = unwrap()


@click.command
@click.option("-c","--config",required=True,multiple=True,type=click.Path(file_okay=True,dir_okay=False,readable=True,exists=True),  help="Config file (YAML)")
@click.option("-u","--user",type=str, default="venus", help="User to target (default: venus)")
@click.option("-v","--verbose",count=True, help="Be more verbose")
def main(config, user, verbose):
    """
    Process new Venus devices.

    This program reads /run/venusian/serial-add (using `socat`)
    and starts the appropriate service.

    More than one config file can be given. They are concatenated.
    The first matching record is used.

    The configuration has the form::

        dbus:
        - match:
            key1: pattern
            key2: another_pattern
          service: NAME
          data:
            foo: bar
            baz: 420
            serial: @ID_SERIAL_SHORT
          user: venus

    Other keys are ignored. The user defaults to venus.
    A missing service skips this device; the next config file is used.
    service=null ignores this device.

    A non-NULL service name causes the service "NAME@DEVICE" to start.
    The unit file is located at /usr/lib/venusian/service/NAME@.service
    (but can be overridden via /var/lib/venusian/USER/service/).

    Values from "data" are forwarded as environment variables:
    the value of "foo" is set as "VE_FOO".
    A data entry that starts with '@' refers to the named device property.
    """
    logging.basicConfig(level=logging.WARNING if verbose == 0 else logging.INFO if verbose == 1 else logging.DEBUG)

    config = [ Path(f) for f in config ]

    h = Handler(config=config, user=user)
    try:
        anyio.run(h.run, backend="trio")
    except* KeyboardInterrupt:
        if verbose:
            raise
        print("Interrupted.", file=sys.stderr)


class Handler:
    bad_serial = re.compile(r"(\w)\1{7,}\b")

    _intro_service = None
    _intro_job = None

    _udev: udev.Context
    dbus: MessageBus
    tg: anyio.abc.TaskGroup

    def __init__(self, config: list[Path], user: str|None = None):
        self.cfg_files = config
        self.read_cfg(first=True)
        if user is None:
            user = os.environ["USER"]
        self.uid = pwd.getpwnam(user).pw_uid
        self.user = user
        self.envdir = Path(f"/run/user/{self.uid}")
        self.envdir.mkdir(exist_ok=True)

        self.known = dict()
        self._reload_done = None
        self._reload_evt = anyio.Lock()

    async def run(self):
        bus = f"unix:path=/run/user/{self.uid}/bus"

        self._udev = context = udev.Context()
        try:
            async with (
                    unwrap,
                    anyio.create_task_group() as self.tg,
                    MessageBus(bus).connect() as self.dbus,
                ):
                await self._dbus_setup()

                await self._run()
        finally:
            with suppress(AttributeError):
                del self._udev
                del self.tg
                del self.dbus

#   async def reload(self):
#       "reload systemd"

#       if self._reload is not None:
#           # Currently reloading. Wait for it to finish.
#           await self._reload.wait()
#           if self._reload is not None:
#               # Another task was faster. Wait for its reload to finish.
#               await self._reload.wait()
#               return

#       self._reload = anyio.Event()
#       logger.error("Reload Start")
#       await self.db_mgr.call_reload()
#       logger.error("Reload Done")

#       self._reload.set()
#       self._reload = None

    def write_env(self,unit,env):
        "write a service's environment file."

        envf = self.envdir / unit
        with envf.open("w") as fd:
            for k,v in env.items():
                print(f"{k}={shlex.quote(str(v))}", file=fd)

    async def _dbus_setup(self):
        self.intro = await self.dbus.introspect(
                'org.freedesktop.systemd1', '/org/freedesktop/systemd1')
        self.db_root = await self.dbus.get_proxy_object(
                'org.freedesktop.systemd1', '/org/freedesktop/systemd1', self.intro)
        self.db_mgr = await self.db_root.get_interface('org.freedesktop.systemd1.Manager')
        self.db_prop = await self.db_root.get_interface('org.freedesktop.DBus.Properties')

#       # for simplicity we assume these are present
#       self.intro_unit = await self.dbus.introspect(
#           'org.freedesktop.systemd1.Unit', '/org/freedesktop/systemd1/unit/dbus_2eservice')
#       self.intro_service = await self.dbus.introspect(
#           'org.freedesktop.systemd1.Service', '/org/freedesktop/systemd1/unit/dbus_2eservice')

    async def _run(self):
        monitor = udev.Monitor.from_netlink(self._udev)
        monitor.filter_by(subsystem="tty")  # others?

        logger.debug("processing existing devices")
        for dev in self._udev.list_devices(subsystem="tty",ID_BUS="usb",SUBSYSTEMS="platform|usb-serial"):
            await self.process(dev)
        logger.debug("waiting for changes")

        n_empty = 0
        fd = socket.fromfd(monitor.fileno(), socket.AF_NETLINK, socket.SOCK_STREAM)
        while True:
            await anyio.wait_readable(fd)
            dev = monitor.poll(timeout=0)
            if dev is None:
                if n_empty > 3:
                    raise RuntimeError("No bus data")
                logger.debug("empty")
                n_empty += 1
                continue

            n_empty = 0
            name = dev.sys_name
            if dev.action == "add":
                await self.process(dev)
            elif dev.action == "remove":
                await self.stop(name)
            else:
                logger.warning("Unknown action %r for %r", dev.action, name)

    def find_cfg(self, dev):
        prop = dev.properties
        def match1(rule: dict[str,str]) -> bool:
            for k,v in rule.items():
                try:
                    r = prop[k]
                except KeyError:
                    try:
                        r = getattr(dev,k)
                    except AttributeError:
                        r = None
                if v is None:
                    if r is not None:
                        return False
                else:
                    try:
                        if not fnmatch(r, v):
                            return False
                    except KeyError:
                        return False
            return True

        def match2(rule: dict):
            try:
                rules = rule["match"]
            except KeyError:
                return None
            if isinstance(rules, list):
                for r in rules:
                    if match1(r):
                        return True
                return False
            else:
                return match1(rules)

        for cfg in self.cfg:
            cfg = cfg.get("udev", None)
            if not cfg:
                continue
            for rule in cfg:
                m = match2(rule)
                if not m:
                    continue
                s = rule.get("service", False)
                if s is None:
                    return None
                elif s is False:
                    break
                if (user := rule.get("user", self.user)) != self.user:
                    logger.debug("Not our device: %r: %s for %s", dev.sys_name, service, user)
                    return None
                return rule

        return None


    async def process(self, dev):
        name = dev.sys_name
        service = self.find_cfg(dev)
        if service is None:
            logger.warning("Unknown device: %r.", name)
            logger.warning("  possible 'match' rules:\n%s", self.recommend_match(dev))
            srv = self.recommend_service(dev) or "modbus  # this is a wild guess"
            logger.warning("  possible service: %s", srv)

            for k,v in dev.properties.items():
                logger.info("  %s=%r", k,v)
            return
        logger.info("Known device: %r: %s", name,service["service"])
        try:
            with unwrap:
                await self.start(name,service,dev)
        except DebugException:
            raise
        except BusError as exc:
            logger.error("Unable to start: %s", exc)
        except Exception as exc:
            logger.exception("Unable to start %s@%s: %r", service["service"], name, exc)

    def recommend_match(self, dev):
        "return a text with match suggestions"
        p = dev.properties
        ser = p.get("ID_USB_SERIAL_SHORT")
        if ser and len(ser) > 3 and not self.bad_serial.match(ser) and "234567" not in ser and "bcdefg" not in ser.lower():
            # ignore obviously-fake or broken serial numbers
            return f"ID_USB_SERIAL: {p['ID_USB_SERIAL']}"
        path = p.get("ID_PATH_TAG")
        if path is not None:
            return f"""\
ID_USB_VENDOR_ID: {p.get('ID_USB_VENDOR_ID') !r}
ID_USB_MODEL_ID: {p.get('ID_USB_MODEL_ID') !r}
ID_PATH_TAG: {path}  # you might want to add wildcards"""

        return f"""\
ID_USB_VENDOR_ID: {p.get('ID_USB_VENDOR_ID') !r}
ID_USB_MODEL_ID: {p.get('ID_USB_MODEL_ID') !r}
sys_name: {dev.sys_name}  # Try to avoid this!
# run "udevadm info {P.get('DEVNAME')}" for more options"""

    def recommend_service(self, dev):
        p = dev.properties
        ve = p.get("VE_SERVICE")
        if ve is not None:
            return ve

    async def service_for(self, uname):
        unit = await self.db_mgr.call_load_unit(uname)

        if self._intro_service is None:
            self._intro_service = await self.dbus.introspect('org.freedesktop.systemd1',unit)
        proxy = await self.dbus.get_proxy_object('org.freedesktop.systemd1', unit, self._intro_service)

        s = await proxy.get_interface('org.freedesktop.systemd1.Service')
        u = await proxy.get_interface('org.freedesktop.systemd1.Unit')
        # p = await proxy.get_interface('org.freedesktop.DBus.Properties')
        st = await u.get_load_state()
        if st == "not-found":
            raise NoSuchService(uname)
        return s,u #,p

    async def start(self, name:str, service:dict, dev, retry=False):
        """Start the named service"""
        if name in self.known:
            logger.error("KNOWN %s %s",name, service)
            return
        sname = service["service"]
        self.known[name] = service
        logger.info("START %s %s",sname,name)
        suname = f"{sname}@{name}"
        uname = f"{suname}.service"

        env = {}
        for k,v in service.get("data",{}).items():
            if isinstance(v,str) and v.startswith("@"):
                v = v[1:]
                try:
                    v = dev.properties[v]
                except KeyError:
                    v = getattr(dev, v)
            k = k.upper()
            env[k] = v

        s,u = await self.service_for(uname)
        self.write_env(suname,env)

        job = await u.call_start("fail")
        try:
            if self._intro_job is None:
                self._intro_job = await self.dbus.introspect('org.freedesktop.systemd1',job)
            jproxy = await self.dbus.get_proxy_object('org.freedesktop.systemd1', job, self._intro_job)
            j = await jproxy.get_interface('org.freedesktop.systemd1.Job')
            js = await j.get_state()
        except DebugException:
            raise
        except Exception as exc:
            logger.error("Job %s: %r", job, exc)
        else:
            logger.error("Job %s: %s", job, js)

        sr = await s.get_result()
        if sr != "success":
            logger.error("Start %s: Job %r: %s", sname, job, sr)


    async def stop(self, name: str):
        """Stop the named service"""
        try:
            service = self.known.pop(name)
        except KeyError:
            return
        sname = service["service"]
        logger.info("STOP %s %s",sname,name)
        uname = f"{sname}@{name}.service"

        s,u = await self.service_for(uname)
        job = await u.call_stop("fail")

        sr = await s.get_result()
        if sr != "success":
            logger.error("Stop %s: Job %r: %s", sname, job, sr)


    def read_cfg(self, first:bool = False):
        cfg = [{}] * len(self.cfg_files) if first else self.cfg

        for n,(c,fn) in enumerate(zip(cfg, self.cfg_files)):
            ts = fn.stat().st_ctime
            if c.get("_t",0) == ts:
                continue

            with fn.open("r") as f:
                try:
                    with unwrap:
                        cf = yload(f)
                        if not isinstance(cf, dict):
                            raise RuntimeError(f"YAML {fn !r} is not a mapping.")
                except DebugException:
                    raise
                except Exception:
                    if prev is None:
                        raise  # first run must work
                    logger.exception("Reading %r", fn)
                    continue

            cf["_t"] = ts
            cfg[n] = cf

        self.cfg = cfg


if __name__ == "__main__":
    try:
        with unwrap:
            main()
    except (DebugException,KeyboardInterrupt):
        print("Interrupted.", file=sys.stderr)
        sys.exit(1)
