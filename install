#!/bin/bash

set -u

HERE="$(realpath "$(dirname "$0")")"

usage() {
    cat <<_END_
Usage: $0
  User:
    --user NAME
        The user for Venusian. If you use this option without '--dest',
        a new user for the existing Venus installation will be created.

    --vnc N
        Use port 5900+N for VNC. The default is 1, or the next free port
        as determined by the SCREEN=X entries in your /etc/venusian/*/vars
        files.

    --fb
        Use the system's "real" video output.

  System:
    --image A --dest B --root C --mount D

        '--dest' is mandatory. '--root' defaults to the current system.

        If '--image' is used, unpack the Venus image A into directory B.
        Next, modify the system at root C. The mountpoint of B on C shall be D.

        The image can be a URL. The special value "-web-" downloads the current image,
        "-rc-" uses the latest release candidate.

        Using "-web-3.14" to retrieve a specific version is on the TODO list.

    --verbose
        Print the steps the script executes.

    --quiet
        Do not report (coarse) progress.

    --skip
        Skip existing files.

    --replace
        Delete the existing Venusian installation before unpacking the new image.

    --no-update
        Don't update our git submodules. (Useful while developing.)

    --sub=ADDON
        Process add-on scripts.

    --repo SOURCE
        Use this URL to fetch a sources.list file for additional Debian packages.
        Use "--repo -" to disable.
        The result will be stored in /etc/apt/sources.list.d/venusian.list

    --repo-key PUBKEYFILE
        Use this URL to fetch the GPG signature file associated with REPO.

  Available additions:
_END_
    ls -1 "$HERE/install.d" | while read d ; do echo -n "      $d  ";
        READ="$HERE/install.d/$d/README"
        if test -f "$READ" ; then head -1 "$READ"; else echo "‹no README file›"; fi
    done
    exit 1
}

if [ "$(id -u)" != 0 ] ; then
    echo "This script needs to run as root. Sorry." >&2
    exit 1
fi

apti() {
   R="$1"
   shift
   $Q echo Installing $@
   if test "$R" = "/" ; then
      apt-get install --yes --no-install-recommends -o Dpkg::Options::="--force-confdef" "$@" </dev/tty >/dev/tty 2>&1
   else
      systemd-nspawn -D "$R" apt-get install --yes --no-install-recommends -o Dpkg::Options::="--force-confdef" "$@" </dev/tty >/dev/tty 2>&1
   fi
}

subs() {
    W="$1"
    for S in "${SUB[@]}" ; do
        if test -f "$HERE/install.d/$S/$W" ; then
            $Q echo Processing "$S/$W"
            source "$HERE/install.d/$S/$W"
        fi
    done
}

_chg() {
    # check: do we replace DST from SRC?
    SRC="$1"
    DST="$2"
    test -n "$FORCE" && return 0
    test -f "$DST" || return 0
    test "$SRC" -ef "$DST" && return 0
    test "$SRC" -nt "$DST" && return 0
    cmp -s "$SRC" "$DST" && return 0
    # "cmp -s" compares sizes before reading, so we don't need to
    return 1
}

fcat() {
    # check: do we not replace DST?
    DST="$1" ; shift
    if [ -z "$FORCE" ] && [ -f "$DST" ] ; then cat >/dev/null ; return ; fi
    S1=0000
    if [ $# -gt 0 ] && [ -f "$DST" ] ; then
        S1=$(sha256sum < "$DST" | sed -e 's/ .*//')
    fi
    
    cat >"$DST"
    if [ $# -gt 0 ] && [ $S1 != $(sha256sum < "$DST" | sed -e 's/ .*//') ] ; then
        "$@"
    fi
}

fchg() {
    # check: do we not replace DST from SRC?
    SRC="$1"
    DST="$2"
    _chg "$SRC" "$DST" || return 0
    rm -f "$DST"
    mkdir -p "$(dirname "$DST")"
    touch "$DST"
    if test -x "$SRC" ; then chmod 755 "$DST"; else chmod 644 "$DST"; fi
    return 1
}

fln() {
    # To link or not to link …
    SRC="$1"
    DST="$2"
    if test -e "$DST" && ! test -L "$DST" ; then
        echo "ERROR: '$DST' is not a symlink. Exiting." >&2
        exit 1
    fi
    if test -z "$FORCE" && test -L "$DST" ; then return ; fi
    rm -f "$DST"
    ln -sf "$SRC" "$DST"
}


next_vnc() {
    # well, "next" unless it's an existing user who already has a screen#
    local P=0 SC f NAME=$1
    while read f ; do
        SC="$(sed -ne 's/^SCREEN=//p' <$f)"
        if [ -n "$SC" ] && [ "$(basename "$(dirname "$f")")" = "$NAME" ] ; then
            echo $SC
            return 0
        fi
        test -z "$SC" || test "$SC" -le $P || P=$SC
    done < <( find "$R/etc/venusian" -maxdepth 2 -mindepth 2 -type f -name vars )
    echo $( expr $P + 1 )
}

gen_user() {
    local NAME="$1" LIBV=$LIBVV/$NAME

if grep -qs "^$NAME:" "$R/etc/passwd" ; then
    $Q echo Updating user $NAME
else
    $Q echo Generating user $NAME
    chroot "$R" /sbin/adduser --disabled-login --home "$LIBV" --ingroup venus --system --comment "Venus Main User" $NAME
fi

grep -qs "^$NAME:" "$R/etc/passwd" || chroot "$R" /sbin/adduser --disabled-login --home "$LIBV" --ingroup venus --system --comment "Venus Main User" $NAME

chroot "$R" /sbin/adduser $NAME systemd-journal 2>/dev/null
chroot "$R" /sbin/adduser $NAME dialout 2>/dev/null
chroot "$R" /sbin/adduser $NAME bluetooth 2>/dev/null
test ! -v FB || chroot "$R" /sbin/adduser $NAME video 2>/dev/null

SC="$LIBV/.config/systemd/user.control"
mkdir -p "$R/$SC/default.target.wants/"
fln "$SERVICE" "$R/$LIBV/.config/systemd/user"
fln ".config/systemd/user.control" "$R/$LIBV/service"

fcat "$R/$LIBV/.config/systemd/user.conf" <<_END_
[Manager]
DefaultEnvironment="PATH=$USRV/bin:/bin:/sbin"
_END_

mkdir -p "$R$LIBV/"{conf,db,log,etc,themes,var/lib}

USERID=$(grep "^$NAME:" $R/etc/passwd | ( IFS=: read a b c d ; echo $c ) )
env USER=$NAME UID=$USERID $USRV/bin/get-unique-id > $R$LIBV/conf/unique-id

chroot "$R" chown -R $NAME $LIBV/{etc,conf,db,log,.config}

VPW="$R$LIBV/conf/vncpassword.txt"
if test ! -s "$VPW" ; then
    read -s -p "VNC password: " pwd </dev/tty >/dev/tty 2>&1
    echo "$pwd" >"$VPW"
    pwd=
fi

mkdir -p "$R/$UD"
mkdir -p "$R/$EV"

fcat "$R/$UD/venusian.conf" <<_END_
[Unit]
After=opt-victronenergy.mount $MNT_U
Requires=opt-victronenergy.mount $MNT_U

[Service]
BindPaths=/var/lib/venusian/%i:/data
BindPaths=/var/lib/venusian/%i/etc:/etc/venus

EnvironmentFile=-/etc/venusian/vars
EnvironmentFile=-$EV/vars

ExecStartPost=+$USRV/bin/iptables_on
ExecStopPost=+$USRV/bin/iptables_off
_END_

if [ ! -s "$R/$EV/vars" ] || ! grep -qs "^SCREEN=" "$R/$EV/vars" ; then
    echo SCREEN=$SCREEN >>"$R/$EV/vars"
fi
if [ -v FB ] ; then
    echo FB=y >>"$R/$EV/vars"
fi

if  ! grep -qs "^MQTT=" "$R/$EV/vars" ; then
    echo MQTT=$MQTT >>"$R/$EV/vars"
fi

subs user
}

# command line processing
TEMP=$(getopt -o 'fFi:d:hm:nqr:Rs:u:v?' --long 'dest:,fast,fb,force,help,image:,mount:,no-update,replace,repo:,repo-key:,root:,skip,sub:,user:,verbose' -n "$0" -- "$@")
if [ $? -ne 0 ]; then
    usage >&2
fi

set -e
eval set -- "$TEMP"
unset TEMP

Q=
verb=
root=/
FORCE=y
SUB=()
SUB_UPD=y
REPO=http://build.smurf.noris.de/info/smurf.list
REPOKEY=http://build.smurf.noris.de/info/smurf.archive.gpg
replace=
unset NAME DEST MNT img fast FB

while : ; do
    case "$1" in
        (-h|-\?|--help)
            usage;
            exit 0 ;;
        (-q|--quiet)
            Q=":"
            shift ;;
        (-f|--force)
            FORCE=y
            shift ;;
        (-F|--fast)
            fast=y
            shift ;;
        (--fb)
            FB=y
            shift ;;
        (--skip)
            FORCE=""
            shift ;;
        (-n|--no-update)
            SUB_UPD=
            shift ;;
        (-v|--verbose)
            verb=y
            shift ;;
        (-R|--replace)
            replace=y
            shift ;;
        (-u|--user)
            NAME="$2"
            shift 2 ;;
        (-d|--dest)
            DEST="$2"
            shift 2 ;;
        (-i|--img|--image)
            img="$2"
            shift 2 ;;
        (-r|--root)
            root="$2"
            shift 2 ;;
        (-m|--mount)
            MNT="$2"
            shift 2 ;;
        (--repo)
            REPO="$2"
            shift 2 ;;
        (--repo-key)
            REPOKEY="$2"
            shift 2 ;;
        (-s|--sub)
            if test -d "$HERE/install.d/$2" ; then 
                SUB+=("$2")
            else
                echo "Unknown argument ('$2'). Exiting." >&2
            fi
            shift 2 ;;
        (--)
            shift; break ;;
        (*)
            echo "Internal error! '$1'" >&2
            exit 1
    esac
done


temp=$(mktemp -d)
trap 'rm -r $temp' 0 1 2 15
cd $temp
umask 022

R="$(realpath "$root")"

LIBVV=/var/lib/venusian
USRV=/usr/lib/venusian
SERVICE="$USRV/service/"

if [ ! -v MNT ] ; then
    MNT="${DEST:-/}"
fi

if [ -v NAME ] ; then
    if [ ! -v DEST ] ; then
        if [ ! -s /etc/systemd/system/opt-victronenergy.mount ] ; then
            echo "Adding users requires an existing Venusian installation." >&2
            usage >&2
            exit 2
        fi
        gen_user $NAME
        exit 0
    fi
else
    NAME=venus
fi

SCREEN=$(next_vnc $NAME)
MNT_U=$(systemd-escape -m "$MNT")
MQTT=1883

UD="/etc/systemd/system/user@$NAME.service.d/"
EV="/etc/venusian/$NAME"

if [ ! -v DEST ] ; then
    echo "A directory for/with the Venus file system is required." >&2
    echo "(Use the '--dest PATH' option.)" >&2
    echo "" >&2
    usage >&2
    exit 2
fi

if test "$verb" = "y" ; then
    Q=":"
    set -x
fi

if [ $# -gt 0 ] ; then
    echo "Superfluous arguments. Exiting." >&2
    exit 2
fi

if [ -d "$USRV" ]; then
    if [ -z "$replace" ] ; then
        echo "Existing installation found ($USRV). Use '--replace'." >&2
        exit 2
    fi
    echo -n "Stopping Venusian users: "
    ls /etc/venusian | while read u ; do 
        systemctl stop user@$u || true
        echo -n "$u "
    done
    echo "."
    umount /opt/victronenergy || true
    rm -r "$USRV"
fi

if [ -d "$DEST" ] && [ -v img ]; then
    if [ -z "$replace" ] ; then
        echo "Existing image found ($DEST). Either add '--replace', or don't use '--image'." >&2
        exit 2
    fi
    btrfs subvol delete "$DEST" 2>/dev/null || rm -rf "$DEST"
fi

################# install local requirements
I=""
which systemd-nspawn >/dev/null 2>&1 || I="$I systemd-container"
which rsync >/dev/null 2>&1 || I="$I rsync"
if test -n "$I" ; then
    $Q echo Locally installing $@
    apt install $I
fi

if test -n "$SUB_UPD" ; then
    (
        cd "$HERE"
        git submodule update --init --recursive
    )
fi

################# COPY

if test -v img ; then
case "$img" in
    (http:*|https:*) DL="$img" ;;
    (-web-) DL=http://updates.victronenergy.com/feeds/venus/release/images/raspberrypi4/venus-image-raspberrypi4.wic.gz ;;
    (-rc-) DL=http://updates.victronenergy.com/feeds/venus/candidate/images/raspberrypi4/venus-image-raspberrypi4.wic.gz ;;
    # (-web*-) DL=?? ;;  # TODO get the link from somewhere
esac
fi

if test -v DL ; then
    F="$temp/img"
    if [ "${DL#.gz}" = "$DL" ] ; then
        wget -O - "$DL" | gzip -d > "$F"
    else
        wget -O $F "$DL"
    fi
    img="$F"
fi

if [ ! -v img ] ; then
    $Q echo "No image given; not copying."
else
$Q echo Copying image

if test -d "$DEST" ; then
   :
else
   btrfs subvol cre "$DEST" 2>/dev/null || mkdir "$DEST"
fi

# if the image is compressed, unpack it
imgz="$img"
img="${imgz%.gz}"
if [ "$img" != "$imgz" ] ; then
   img="$temp/${img##*/}"
   gzip -d < "$imgz" > "$img"
fi

mkdir $temp/dir
ld=$(losetup -f --show -P "$img")
trap 'losetup -d $ld; rm -r $temp' 0 1 2 15

mount ${ld}p2 $temp/dir
trap 'umount $temp/dir; losetup -d $ld; rm -r $temp' 0 1 2 15

rsync -a --numeric-ids --perms --inplace "$temp/dir/." "$DEST/."
echo "Copy/sync finished."

umount $temp/dir; losetup -d $ld
trap 'rm -r $temp' 0 1 2 15
fi
################# END COPY


################# SETUP
if ! VERS=$(sed -ne 's/.* \(v[0-9]\.[0-9][0-9]*\).*/\1/p' <"$DEST/etc/issue") ; then
    echo Could not detect the Venus version in "'$DEST/etc/issue'" >&2
    exit 1
fi
if test -f "$root" ; then
    echo TODO root as an Image >&2
    exit 1
fi

DEST="$(realpath "$DEST")"

mkdir -p "$R/opt/victronenergy"
mkdir -p "$R/etc/venus"
mkdir -p "$R/data"
mkdir -p "$R/$USRV"/{opt,.opt}

subs pre

# create user
$Q echo Primary set-up
grep -qs "^venus:" "$R/etc/group" || chroot "$R" /sbin/addgroup --system venus
grep -qs "^venusian:" "$R/etc/passwd" || chroot "$R" /sbin/adduser --disabled-login --home "$LIBVV" --ingroup $NAME --system --comment "Venusian System" venusian

# systemd
mkdir -p "$SERVICE"

# set up DBUS permissions
for f in "$DEST/etc/dbus-1/system.d"/* ; do
    g="$R/etc/dbus-1/system.d/${f##*/}"
    test -s "$g" || \
    sed <"$f" >"$g"  -e 's/"root"/"venus"/'
done

cp -r "$HERE/lib/"* "$R$USRV/"

if [ "X$REPO" != "X-" ] ; then
    $Q echo "Adding repository (some packages are not yet in Debian)"

    test -s "$R/etc/apt/trusted.gpg.d/venusian.archive.gpg" || wget -q -O "$R/etc/apt/trusted.gpg.d/venusian.archive.gpg" $REPOKEY
    test -s "$R/etc/apt/sources.list.d/venusian.list" || wget -q -O "$R/etc/apt/sources.list.d/venusian.list" $REPO
fi

if ! test -v fast ; then
    if test "$R" = "/" ; then
        apt update
    else
        systemd-nspawn -D "$R" apt update
    fi
fi

$Q echo Checking startup scripts

lsrc() {
    ls "$DEST/etc/rcS.d"
    ls "$DEST/etc/rc5.d"
}
# not using the obvious (ls;ls)| pipe here because of a bash bug:
# line numbers on errors below this point would be wrong
lsrc | while read f ; do
    f="${f%.sh}"
    case "$f" in
        ### Startup scripts, rcS.d
        (S01keymap) ;; # host OS
        (S02sysfs) ;; # mounts a bunch of directories; host OS
        (S02zzz-resize-sdcard) ;; # host OS
        (S03mountall) ;; # host OS
        (S03test-data-partition) ;; # host problem
        (S04udev) ;; # host
        (S05checkroot) ;; # host
        (S0?modutils) ;; # host
        (S06alignment) ;; # host; mode 3 for alignment fixes (repair+complain)
        (S06checkroot) ;; # host
        (S06devpts) ;; # host
        (S07bootlogd) ;; # journal
        (S10overlays) ;; # done later
        (S20static-nodes) ;; # systemd
        (S29read-only-rootfs-hook) ;; # volatile /var/lib
        (S30clean-data) ;; # drop large log file
        (S36bootmisc) ;; # various system stuff
        (S37populate-volatile)
            # systemd
            # TODO set up /data
            ;;
        (S38dmesg) ;; # journald
        (S38urandom) ;; # random seed. Host.
        (S39hostname) ;; # host
        (S40read-eeprom) ;; # we don't have that
        (S50iptables) ;; # host
        (S80watchdog) ;; # possible TODO
        (S90gpio_pins) ;; # empty list
        (S90machine-conf) ;; # not on RPi
        (S99custom-rc-early)
            # TODO run /data/rcS.local
            ;;

### Startup scripts, rc5.d
        (S01networking) ;; # systemd-networkd or whatever
        (S02dbus-1) ;; # in base system
        (S09haveged) ;; # obsolete since kernel 5.6
        (S15mountnfs) ;; # system
        (S20apmd) ;; # not applicable on Raspberry Pi
        (S20bluetooth) ;; # host system
        (S20dnsmasq) ;; # host system
        (S20syslog) ;; # host system
        (S21avahi-daemon)
            ## host system, but ...
            mkdir -p "$R/etc/avahi"
            if test ! -f "$R/etc/avahi/avahi-daemon.conf" ; then
                $Q echo Installing avahi-daemon
                apti "$R" avahi-daemon
            fi
            sed -i -e s/^use-iff-running=/use-iff-running=yes/ "$R/etc/avahi/avahi-daemon.conf"

            ## TODO Garmin service file?
            ;;

        (S30update-data) ;; # TODO automatic data update
        (S60php-fpm) ;; # possibly some TODO or other
        (S70connman) ;; # host problem
        (S70swupdate) ;; # empty
        (S75avahi-autoipd) ;; # host problem
        (S80resolv-watch) ;; # systemd-resolved or some other host program
        (S82report-data-failure) ;; # local file system monitoring is not a Venus problem
        (S90crond)
            ## host OS
            # one builtin cron script, which does automated software updates,
            # which we don't do
            ;;

        (S95svscanboot)
            # SVC
            # TODO convert to systemd?
            ;;
        (S98scan-versions) ;; # alternate root file systems
        (S99check-updates) ;; # system update check
        (S99custom-rc-late)
            # TODO run /data/rc.local
            ;;
        (S99rmnologin) ;; # systemd
        (S99stop-bootlogd) ;; # journald

        (*)
            cat <<_ >/dev/stderr
UNKNOWN: startup script: $f

Please read the "Errors" section of our README.
_
            exit 1 ;;
    esac
done

################# Services

fchg "$HERE/udev.yml" "$R/$USRV/udev.yml" || \
    cp "$HERE/udev.yml" "$R/$USRV/udev.yml"
test -s "$R/$LIBVV/udev.yml" ||
    cp "$HERE/udev.example.yml" "$R/$LIBVV/udev.yml"
for f in $(ls "$HERE/service/") ; do
    fchg "$HERE/service/$f" "$R/$USRV/service/$f" || \
    sed -e "s#@USRV@#$USRV#g" -e "s#@LIBVV@#$LIBVV#g" \
        < "$HERE/service/$f" > "$R/$USRV/service/$f"
done

WANTS="$SERVICE/default.target.wants"
$Q echo Converting services
mkdir -p "$WANTS"
starters() {
    ls -1 "$DEST/opt/victronenergy/service/"
    echo "flashmq"
}
starters | while read f ; do
    fx="${f##*/}"
    g="$SERVICE/$fx.service"
    test -n "$FORCE" || test ! -f "$g" || continue
    U=$temp/unit
    echo >$U "[Service]"

    case "$fx" in 
        (ppp) continue ;; # Of course not.
        (llmnrd) continue ;; # Not that either.
        (simple-upnpd) continue ;; # no
        (netmon) continue ;; # avahi restart on network change
        (nginx) continue ;; # TODO teach the host OS
        (serial-starter) # that's the job of our udev-handler
            fln "$SERVICE/udev-handler.service" "$WANTS/udev-handler.service"
            continue ;;
        (dbus-digitalinputs) continue ;; # TODO?
        (dbus-qwacs) continue ;; # ?
        (dbus-fronius) continue ;; # ?
        (dbus-adc) continue ;; # ?
        (dbus-ble-sensors) continue ;; # ?
        (venus-html5-logger) continue ;; # what for?
        (dbus-mqtt) continue ;; # superseded by dbus-flashmq
        (flashmq)
            echo >>$U LimitNOFILE=65536
            echo >>$U ExecStartPre=/usr/lib/venusian/bin/gen-flashmq-conf
            echo >>$U ExecStart=/usr/bin/flashmq --config-file /run/user/%U/flashmq.conf
            echo >>$U ExecReload=/bin/kill -HUP \$MAINPID
            ;;
        (gui)
            echo >>$U WorkingDirectory="/opt/victronenergy/gui"
            echo >>$U ExecStart="$USRV/bin/start-gui"
            ;;
        (*)
            echo >>$U ExecStart=/opt/victronenergy/service/$fx/run
            ;;
    esac
    echo >>$U "Type=simple"
    echo >>$U "Restart=always"
    echo >>$U "RestartSec=10"
    echo >>$U "EnvironmentFile=-/etc/venusian/vars"
    echo >>$U "EnvironmentFile=-/etc/venusian/%u/vars"
    echo >>$U "EnvironmentFile=-/etc/venusian/%u/%N"
    echo >>$U "EnvironmentFile=-/run/user/%U/vars"
    echo >>$U "EnvironmentFile=-/run/user/%U/%N"
    if [ "$fx" != "localsettings" ] ; then
        echo >>$U ""
        echo >>$U "[Unit]"
        echo >>$U "Requires=localsettings.service"
        echo >>$U "After=localsettings.service"
    fi
    if [ "$fx" == "flashmq" ] ; then
        echo >>$U "Description=Per-User FlashMQ MQTT server"
        echo >>$U "ConditionEnvironment=MQTT"
        echo >>$U ""
        echo >>$U "[Install]"
        echo >>$U "WantedBy=multi-user.target"
    fi
    fcat "$SERVICE/$fx.service" <$U
    fln "$SERVICE/$fx.service" "$WANTS/$fx.service"

    rm $U
done

################# ELF starter

LA="$DEST/lib/ld-2.31.so"
LB="$R/lib/ld-linux-armhf.so.3"
L=
for S in "${SUB[@]}" ; do
    test -s "$S/lib" || continue
    L=y
    source "$S/lib"
done

if test -n "$L" ; then
    $Q echo Skip patching ld-linux-armhf
elif test ! -s "$LB" || test "$LA" -nt "$LB" ; then
    # need to hack
    $Q echo Patching ld-linux-armhf
    sed -e 's#/lib/#/v/l/#' -e 's#/usr/lib/#/v/u/lib/#' < "$LA" > "$LB.n"
    if test $(stat --format %s "$LA") -ne $(stat --format %s "$LA") ; then
        echo Patching $LA to $LB did not work
        exit 1
    fi
    mv "$LB.n" "$LB"
    touch -r "$LA" "$LB"
    chmod 755 "$LB"
fi

################# random directories and links
$Q echo Checking symlinks
fln "$MNT/lib" "$R/l"
fln "lib" "$DEST/usr/l"
# fln "$MNT/opt/victronenergy" "$R/opt/victronenergy"
test -e "$R/opt/victronenergy" || mkdir -p "$R/opt/victronenergy"
fln "$MNT/usr/lib/fonts" "$R/usr/lib/fonts"
fln "$MNT/usr/lib/gconv" "$R/usr/lib/gconv"

# if /o/v is a mountpoint, assume that it's our overlay,
# thus we write to that. Otherwise we write to the overlay's
# top directory.
if mountpoint -q "$R/opt/victronenergy" ; then
    if ! [ -d "$R/opt/victronenergy/gui" ] ; then
        echo "'$R/opt/victronenergy' is mounted but empty. Unmounting." >&2
        umount "$R/opt/victronenergy"
        OPTVIC="$R/$USRV/opt"
    else
        OPTVIC="$R/opt/victronenergy"
    fi
else
    OPTVIC="$R/$USRV/opt"
fi

mkdir -p "$R/v"
chmod 755 "$R/v"
fln "$MNT/lib" "$R/v/l"
fln "$MNT/usr" "$R/v/u"

mkdir -p "$OPTVIC/gui"
chmod 755 "$OPTVIC/gui"

I=""
case "$(chroot "$R" dpkg --print-architecture)" in
    (arm64|armhf)
        # nothing to do
        ;;
    (*)
        test -s "$R/usr/bin/qemu-arm" || I="$I qemu-user"
        test -s "$R/usr/share/binfmts/qemu-arm" || I="$I qemu-user-binfmt"
        ;;
esac

test -s "$R/usr/bin/pstree" || I="$I psmisc"
test -s "$R/usr/bin/sudo" || I="$I sudo"
test -s "$R/usr/bin/make" || I="$I make"
test -s "$R/usr/sbin/iptables" || I="$I iptables"
test -s "$R/usr/bin/socat" || I="$I socat"
test -s "$R/usr/bin/bluetoothctl" || I="$I bluez"
test -s "$R/usr/bin/fuse-overlayfs" || I="$I fuse-overlayfs"
test -d "$R/usr/lib/python3/dist-packages/dbus_next" || I="$I python3-dbus-next"
test -d "$R/usr/lib/python3/dist-packages/paho/mqtt" || I="$I python3-paho-mqtt"
test -d "$R/usr/lib/python3/dist-packages/serial_asyncio" || I="$I python3-serial-asyncio"

for P in lxml dbus pyudev pymodbus dnslib websockets click asyncclick asyncdbus yaml attr outcome trio ; do
    test -d "$R/usr/lib/python3/dist-packages/$P" && continue
    I="$I python3-$P"
done
subs pkg-r
test -z "$I" || apti "$R" $I

NTW="$R/etc/systemd/system/network-online.target.wants"
mkdir -p "$NTW"
fln /lib/systemd/system/user@.service "$NTW/user@venus.service"
fln /etc/systemd/system/venus.service "$R/etc/systemd/system/network-online.target.wants/venus.service"

mkdir -p "$OPTVIC/gui/qt-components/qml"
fln "$MNT/usr/lib/qtopia/plugins/gfxdrivers" "$OPTVIC/gui/gfxdrivers"
fln "$MNT/usr/lib/qml/QtQml" "$OPTVIC/gui/qt-components/qml/QtQml"

fln "$USRV/bin/get-unique-id" "$R/sbin/get-unique-id"
fln "$MNT/usr/bin/dbus" "$R/usr/bin/dbus"

fln "$MNT/etc/profile.d" "$R/etc/venus/profile.d"

################# overlay

# TODO check if the target system has a kernel-side overlayfs

fcat "$R/etc/systemd/system/opt-victronenergy.mount" <<_END_
[Unit]
After=sysinit.target
Requires=sysinit.target

[Mount]
Where=/opt/victronenergy
What=$USRV/opt
Type=fuse.fuse-overlayfs
Options=allow_other,lowerdir=$MNT/opt/victronenergy,upperdir=$USRV/opt,workdir=$USRV/.opt
_END_

################# patches

# Patch filters are located in $HERE/patch and $HERE.install.d/NAME/patch.
# Their relative path is appended to /opt/victronenergy: that file is patched.

vfind() { # file
    local p="$1"
    if [ ! -d "$p.V" ] ; then echo $p; return 0; fi
    while read v ; do
        if ! [ $v \< $VERS ] ; then
            echo $p.V/$v; return 0
        fi
    done < <(ls "$p.V" | sort)
    echo $p; return 0
}

pat() { # path [sub]
    local p="$1"
    local f="$(realpath --relative-to "$2" "$1")"
    local fs="$DEST/opt/victronenergy/$f"
    local fd="$OPTVIC/$f"
    if ! test -s "$fs" ; then return; fi
    p="$(vfind $p)"
    fchg "$fs" "$fd" || \
        if test -x $p ; then
            $p < $fs > $fd
        else
            ft="$temp/$(basename "$fd")"
            cp "$fs" "$ft"
            patch $ft < $p
            cp "$ft" "$fd"
        fi
}

find "$HERE/patch" -type f | while read f ; do
    pat "$f" "$HERE/patch"
done
for S in "${SUB[@]}" ; do
    D="$HERE/install.d/$S/patch"
    test -d "$D" || continue
    find "$D" -type f | while read f ; do
        pat "$f" "$D"
    done
done


################# mountpoint

if [ "$MNT" != "$DEST" ] ; then
    mkdir -p "$R/$MNT"

    if [ "$R" = "/" ] ; then
        fcat "$R/etc/systemd/system/$MNT_U" <<_END_
[Unit]
After=sysinit.target
Requires=sysinit.target

[Mount]
Where=$MNT
What=$DEST
Type=none
Options=bind
_END_
    elif [ "$(realpath "$R/$MNT")" != "$(realpath "$DEST")" ] ; then
        echo "** You need to configure mounting $MNT manually **" >&2
    else
        MNT_U=
    fi
else
    MNT_U=
fi

################# finish

find "$R/$USRV" -type d -print0|xargs -0 chmod 755
find "$R/$USRV/"{bin,opt} -type f -print0|xargs -0 chmod 755

gen_user $NAME

subs post

test "$R" = "/" && systemctl daemon-reload

$Q echo "Done."
